// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *[]struct {
		Error string `json:"error"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

// GetProfileResponse defines model for GetProfileResponse.
type GetProfileResponse struct {
	FullName    string `json:"full_name"`
	PhoneNumber string `json:"phone_number"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken string             `json:"access_token"`
	UserId      openapi_types.UUID `json:"user_id"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// UpdateProfileRequest defines model for UpdateProfileRequest.
type UpdateProfileRequest struct {
	FullName    string `json:"full_name"`
	PhoneNumber string `json:"phone_number"`
}

// GetV1UsersProfileParams defines parameters for GetV1UsersProfile.
type GetV1UsersProfileParams struct {
	// Authorization Bearer <access token>
	Authorization string `json:"Authorization"`
}

// PutV1UsersProfileParams defines parameters for PutV1UsersProfile.
type PutV1UsersProfileParams struct {
	// Authorization Bearer <access token>
	Authorization string `json:"Authorization"`
}

// PostApiV1UsersLoginJSONRequestBody defines body for PostApiV1UsersLogin for application/json ContentType.
type PostApiV1UsersLoginJSONRequestBody = LoginRequest

// PutV1UsersProfileJSONRequestBody defines body for PutV1UsersProfile for application/json ContentType.
type PutV1UsersProfileJSONRequestBody = UpdateProfileRequest

// PostApiV1UsersRegisterJSONRequestBody defines body for PostApiV1UsersRegister for application/json ContentType.
type PostApiV1UsersRegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User Login
	// (POST /api/v1/users/login)
	PostApiV1UsersLogin(ctx echo.Context) error
	// Get My Profile
	// (GET /api/v1/users/profile)
	GetV1UsersProfile(ctx echo.Context, params GetV1UsersProfileParams) error
	// Update My Profile
	// (PUT /api/v1/users/profile)
	PutV1UsersProfile(ctx echo.Context, params PutV1UsersProfileParams) error
	// User Registration
	// (POST /api/v1/users/register)
	PostApiV1UsersRegister(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1UsersLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1UsersLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1UsersLogin(ctx)
	return err
}

// GetV1UsersProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1UsersProfile(ctx, params)
	return err
}

// PutV1UsersProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1UsersProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV1UsersProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutV1UsersProfile(ctx, params)
	return err
}

// PostApiV1UsersRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1UsersRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1UsersRegister(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/users/login", wrapper.PostApiV1UsersLogin)
	router.GET(baseURL+"/api/v1/users/profile", wrapper.GetV1UsersProfile)
	router.PUT(baseURL+"/api/v1/users/profile", wrapper.PutV1UsersProfile)
	router.POST(baseURL+"/api/v1/users/register", wrapper.PostApiV1UsersRegister)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbW/bthP/Ki7/+QNrK0cPlhVbwNClRRcEa7Yg6/ZicRbQ0tmiK5EsSTm2A3/3gZSU",
	"SI6SOpubdMD8iqLveA+/3x2P1yhiGWcUqJIovEYySiDDZvleCCbOQHJGJegNLhgHoQiYv2NQmKRmSRRk",
	"8q4E6AP0Qi05oBBJJQidovXaQgI+50RAjMLzUuzCqsTYeAaRQuubDSwEXurvDKTEU/jykZVg26FHoE4F",
	"m5AU7o9tkqfpJcVZmykL8YRRuKR5NoYtwrs9a0NTO0dUqlVbfNr03EKLrlSMp2SaKJP0WKfmYDW88mbO",
	"hFxNxsb0BzYl9Aw+5yDV3cA4lvKKiXgHcTWkrduTa2E1fNkuoOUYsCTONFCJ+lQP6D6ocBSBlJeKfQLa",
	"GlUuQVwSE/GEiQwrFKI8J/GtQ/cEWClaTRt343sUYoPxsDcOwI1mfOEZm2cwJVKBuBe0BhszvPgAdKoS",
	"FAaOhTJCq8+e1QJpDe+6pt/QDLSgUiAoCtGf3735fv/V+WH3j4uXZjkaxcXi/Ie9F/9/9WaUO44XXLzU",
	"Iri7Go3ixv51YAX+eg9ZXyZYzSO31/DIdRoujUavA2//+sBynbaTH2ZmowBbWLqZ/+1w9D2a5BGZidWQ",
	"DDZwvI+r/5iKrV4/in6z5crDCzGN5nNVNIzfeIwV3LSfr8DBZ0a9lrTWWLdLXG9IgkUyyfPVQabx1uYJ",
	"nTAtkJIISsCLFKGT44/mAqvsShCdX0HMSaSBmoOQhOkY3X1n39GSjAPFnGhDZsskIjGptzEn9ty1NQmk",
	"neqeY/BhBU4aJawIo8fazVMm1SEnv7vapDQNChV5AqnesnipVSJGFVCjjTlPSWT07Zlk9HYG0Ks9ARMU",
	"ov/Zt0OCXU4IdqO5F/kQJReN257j7NpWyXRjKwYZCcJVkcdfftJJ9Hdosjn9tJh8i+POTfgW8r3h09n+",
	"yFjnBNNl5YDUHvSfMvpjqqsUp4bVIDpGwdSkzLMMi2XF+oKC+o8mj3lRhNqRKbQQ+QhUSeKyXE1JCJyB",
	"AiFReH69iQdgAaKjb6FeVNzYHXNjmx2trusGJYBj0yDKSj3MVcIEWRnLqN5SlMjBquVrs/1cfEXCtwyE",
	"D7C+93S4/8jEmMQx0G+ScUegOifLTsUYffnkbU0y/1dwa/c9u/X+a+3dfvHEqyfhZ9Z5VzrxrKzznSfs",
	"tO8YnaSkeDl+ew3WwNlg/J0+K8o5cduRoZorHz01wAJnPC34875Yd1z9McdpDhszZMX0+gsFZctT/eGI",
	"+MXmWzlErwNv4Fa/ImHbZXpzvG+lu7uTAG/me4TdYOj33ag76Hv9rt/re93xIMJd58CJY98fYhf3/14Q",
	"D1BVAFYQP/sg9F951uefArmi3ErEjUZxzeQi1feGUjy07ZRFOE2YVOHAGThofbH+KwAA///h4/B3nhMA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
